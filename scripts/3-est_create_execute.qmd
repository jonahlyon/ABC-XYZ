---
title: "ABC-XYZ Premise and Dataset Creation"
author: Jonah Lyon (jonah@a2-ai.com)
date: today
date-format: long
format:
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
---

The purpose of this script is to set up and execute model runs for the 500 simulation replicate datasets.  With the 500 model estimates for clearance and central volume, we can compare the range of estimates to the original estimates from the ABC-XYZ PopPK model.  Ideally, there should be no bias in the parameter estimates, and the mean and median of the 500 estimates for parameters should fall around the ABC-XYZ final estimates. However, given limitations of the study design and sparse sampling, some bias may be inherent.

```{r, warning = FALSE, echo = FALSE, message = FALSE}
renv::snapshot()
```


```{r, echo = FALSE, warning = FALSE, message = FALSE}
library(tidyverse)
library(mrgsolve)
library(glue)
library(whisker)
library(bbr)
library(yspec)

# data spec yaml file
spec <- ys_load("../data/derived/ppk.yaml")
derDir <- "../data/derived/dose_histories"
base_data <- read_csv(file.path(derDir, "subject_demog_dose.csv"), na = ".")


# UPDATE if new simulation estimation iteration
simdatDir <- "../model/nonmem/simest1"

```

# Load PopPK Model Run for ABC-XYZ
```{r}
mod1 <- mread("../model/R-mrgsolve/1001.mod", 
              start = 0, end = 120, delta = 1)

```


# Write Template Control Stream
```{r}
model_code <- 
"$PROB Template Estimation for Simulation Runs

$INPUT C, LINE, STUDY, ID, ATFD = TIME, ATLD, NTFD, NTLD, AMT, DV, LDV, EVID, CMT, MDV,
          BLQ, LLOQ, DOSEA, DOSEN, BWT, BHT, BBMI, BAGE, SEXF, RACEN, PTYPE, 
          BECOG, BALB, BCRCL, BHFC, REGN, FOOD

$DATA sim{{j}}.csv
      IGNORE=@
      IGNORE=(BLQ.GT.0)

$SUBROUTINE ADVAN4 TRANS4

$PK
OBESE = 0
IF(BBMI.GT.30) OBESE = 1

ALB1 = 3.4
IF(BALB.GT.0) ALB1 = BALB

TVCL = THETA(1)
CL   = TVCL * EXP(ETA(1)) * (1 + OBESE*THETA(6)) * (ALB1/3.4)**THETA(8)

TVV2 = THETA(2)
V2   = TVV2 * EXP(ETA(2)) * (1 + OBESE*THETA(7))

TVV3 = THETA(3)
V3   = TVV3 * EXP(ETA(3))

TVQ  = THETA(4)
Q    = TVQ * EXP(ETA(4))

TVKA = THETA(5)
KA   = TVKA * EXP(ETA(5))

S2 = V2/1000 ; dose in mg, conc in ng/mL

$ERROR (OBSERVATION ONLY)
IPRED = F
Y=IPRED*(1+EPS(1)) + EPS(2)

$THETA
(0, 0.3)     ; THETA1 CL {L/hr}
(0, 16)      ; THETA2 V2 {L}
8.77 FIX     ; THETA3 V3 {L}
1.72 FIX     ; THETA4 Q {L/hr}
0.817 FIX    ; THETA5 KA {1/hr}
0.21 FIX     ;6 OBESE ~ CL
0.23 FIX     ;7 OBESE ~ VC
-0.3 FIX     ;8 ALB ~ CL


$OMEGA
0.1                ;1 IIV on CL
0.1                ;2 IIV on V2
5.95E-02 FIX       ;3 IIV on V3
0 FIX              ;4 IIV on Q
0.72 FIX           ;5 IIV on KA

$SIGMA
0.05        ;Proportional Error
0 FIX      ;Additive Error {ng/mL}

$EST MAXEVAL=9999 METHOD=1 INTER SIGL=6 NSIG=3 PRINT=1 NOABORT MSFO=./sim{{j}}.msf
"

write_lines(model_code, file = file.path(simdatDir, "temp.mod"))


```


```{r}

template_ctl <- read_file(file.path(simdatDir, "temp.mod"))

n <- 500
walk(seq(n), function(q, overwrite = TRUE){
  
  mod_name <- str_c("sim", q)
  mod_path <- glue("{simdatDir}/{mod_name}")
  
  if(file.exists(paste0(mod_path, ".yaml")) && !overwrite) {
    return(read_model(mod_path))
  }
  
  new_ctl <- whisker.render(template_ctl, list(run_num = mod_name, j = q))
  write_file(new_ctl, file = paste0(mod_path, ".mod"))
  
  mod <- new_model(
    mod_path,
    .description = glue("simulation estimation {mod_name}"),
    .overwrite = TRUE
  )
  mod
})

```

```{r}

n <- 500 # adjusting n for testing purposes:

# bbi_init(.dir = simdatDir,
#          .nonmem_dir = "/opt/nonmem",
#          .nonmem_version = "nm751")

walk(seq(n), function(q){
  model_scripts<- "scripts/"

  model_dir <- simdatDir
  model_run <- str_c("sim", q)

  .dh$load_internal()

  yaml<- read_model(file.path(model_dir,model_run))
  
  submit_model(yaml, .overwrite = TRUE)
})



```



